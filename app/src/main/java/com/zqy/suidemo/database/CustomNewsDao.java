package com.zqy.suidemo.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.zqy.suidemo.database.model.CustomNews;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUSTOM_NEWS".
*/
public class CustomNewsDao extends AbstractDao<CustomNews, Long> {

    public static final String TABLENAME = "CUSTOM_NEWS";

    /**
     * Properties of entity CustomNews.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property MessageId = new Property(1, String.class, "messageId", false, "MESSAGE_ID");
        public final static Property MsgType = new Property(2, int.class, "msgType", false, "MSG_TYPE");
        public final static Property MsgTime = new Property(3, long.class, "msgTime", false, "MSG_TIME");
        public final static Property ContentType = new Property(4, String.class, "contentType", false, "CONTENT_TYPE");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Message = new Property(6, String.class, "message", false, "MESSAGE");
        public final static Property Extra = new Property(7, String.class, "extra", false, "EXTRA");
        public final static Property IsRead = new Property(8, boolean.class, "isRead", false, "IS_READ");
    }


    public CustomNewsDao(DaoConfig config) {
        super(config);
    }
    
    public CustomNewsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUSTOM_NEWS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"MESSAGE_ID\" TEXT," + // 1: messageId
                "\"MSG_TYPE\" INTEGER NOT NULL ," + // 2: msgType
                "\"MSG_TIME\" INTEGER NOT NULL ," + // 3: msgTime
                "\"CONTENT_TYPE\" TEXT," + // 4: contentType
                "\"TITLE\" TEXT," + // 5: title
                "\"MESSAGE\" TEXT," + // 6: message
                "\"EXTRA\" TEXT," + // 7: extra
                "\"IS_READ\" INTEGER NOT NULL );"); // 8: isRead
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOM_NEWS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CustomNews entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(2, messageId);
        }
        stmt.bindLong(3, entity.getMsgType());
        stmt.bindLong(4, entity.getMsgTime());
 
        String contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(5, contentType);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(7, message);
        }
 
        String extra = entity.getExtra();
        if (extra != null) {
            stmt.bindString(8, extra);
        }
        stmt.bindLong(9, entity.getIsRead() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CustomNews entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(2, messageId);
        }
        stmt.bindLong(3, entity.getMsgType());
        stmt.bindLong(4, entity.getMsgTime());
 
        String contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(5, contentType);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(7, message);
        }
 
        String extra = entity.getExtra();
        if (extra != null) {
            stmt.bindString(8, extra);
        }
        stmt.bindLong(9, entity.getIsRead() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CustomNews readEntity(Cursor cursor, int offset) {
        CustomNews entity = new CustomNews( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // messageId
            cursor.getInt(offset + 2), // msgType
            cursor.getLong(offset + 3), // msgTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // contentType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // message
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // extra
            cursor.getShort(offset + 8) != 0 // isRead
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CustomNews entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setMessageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMsgType(cursor.getInt(offset + 2));
        entity.setMsgTime(cursor.getLong(offset + 3));
        entity.setContentType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMessage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExtra(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsRead(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CustomNews entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CustomNews entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CustomNews entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
