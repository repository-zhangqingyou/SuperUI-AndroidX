/*
 * mavenCentral中央仓库上传插件
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'maven-publish'
apply plugin: 'signing'

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
}

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}


publishing {
    publications {
        release(MavenPublication) {
            // The coordinates of the library, being set from variables that
            // we'll set up in a moment
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION


            // Two artifacts, the `aar` and the sources
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar

            // Self-explanatory metadata for the most part
            pom {
                name = PUBLISH_ARTIFACT_ID
                description = '标准获取移动设备唯一标识'
                // If your project has a dedicated site, use its URL here
                url = 'https://gitee.com/zqycl'

                // Version control info, if you're using GitHub, follow the format as seen here
                scm {
                    //修改成你的Git地址：
                    connection = 'scm:https://gitee.com/zqycl/SuperUI-AndroidX.git'
                    developerConnection = 'scm:git@gitee.com:zqycl/SuperUI-AndroidX.git'
                    //分支地址：
                    url = 'https://gitee.com/zqycl/SuperUI-AndroidX'
                }

                licenses {
                    license {
                        //协议类型，一般默认Apache License2.0的话不用改：
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'zhangqingyou'
                        name = 'zhangqingyou'
                        email = '1334738402@qq.com'
                    }
                }

                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        // The repository to publish to, Sonatype/MavenCentral
        maven {
            // This is an arbitrary name, you may also use "mavencentral" or
            // any other name that's descriptive for you
            name = "SuperUI-AndroidX"

            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            // You only need this if you want to publish snapshots, otherwise just set the URL
            // to the release repo directly
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl


            // The username and password we've fetched earlier
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}
signing {
    sign publishing.publications
}
//
//apply plugin: 'maven-publish'
//apply plugin: 'signing'
//
//version = VERSION_NAME
//group = GROUP
//
//def isReleaseBuild() {
//    return VERSION_NAME.contains("SNAPSHOT") == false
//}
//
//def getReleaseRepositoryUrl() {
//    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
//            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
//}
//
//def getSnapshotRepositoryUrl() {
//    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
//            : "https://oss.sonatype.org/content/repositories/snapshots/"
//}
//
//def getRepositoryUsername() {
//    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
//}
//
//def getRepositoryPassword() {
//    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
//}
//
//def configurePom(pom) {
//    pom.name = POM_NAME
//    pom.packaging = POM_PACKAGING
//    pom.description = POM_DESCRIPTION
//    pom.url = POM_URL
//
//    pom.scm {
//        url = POM_SCM_URL
//        connection = POM_SCM_CONNECTION
//        developerConnection = POM_SCM_DEV_CONNECTION
//    }
//
//    pom.licenses {
//        license {
//            name = POM_LICENCE_NAME
//            url = POM_LICENCE_URL
//            distribution = POM_LICENCE_DIST
//        }
//    }
//
//    pom.developers {
//        developer {
//            id = POM_DEVELOPER_ID
//            name = POM_DEVELOPER_NAME
//        }
//    }
//}
//
//afterEvaluate { project ->
//    publishing {
//        repositories {
//            maven {
//                def releasesRepoUrl = getReleaseRepositoryUrl()
//                def snapshotsRepoUrl = getSnapshotRepositoryUrl()
//                url = isReleaseBuild() ? releasesRepoUrl : snapshotsRepoUrl
//
//                credentials(PasswordCredentials) {
//                    username = getRepositoryUsername()
//                    password = getRepositoryPassword()
//                }
//            }
//        }
//    }
//
//    if (project.getPlugins().hasPlugin('com.android.application') ||
//            project.getPlugins().hasPlugin('com.android.library')) {
//
//        task androidJavadocs(type: Javadoc) {
//            source = android.sourceSets.main.java.source
//            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//            excludes = ['**/*.kt']
//        }
//
//        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
//            classifier = 'javadoc'
//            from androidJavadocs.destinationDir
//        }
//
//        task androidSourcesJar(type: Jar) {
//            classifier = 'sources'
//            from android.sourceSets.main.java.source
//        }
//    }
//
//    if (JavaVersion.current().isJava8Compatible()) {
//        allprojects {
//            tasks.withType(Javadoc) {
//                options.addStringOption('Xdoclint:none', '-quiet')
//            }
//        }
//    }
//
//    if (JavaVersion.current().isJava9Compatible()) {
//        allprojects {
//            tasks.withType(Javadoc) {
//                options.addBooleanOption('html5', true)
//            }
//        }
//    }
//
//    artifacts {
//        if (project.getPlugins().hasPlugin('com.android.application') ||
//                project.getPlugins().hasPlugin('com.android.library')) {
//            archives androidSourcesJar
//            archives androidJavadocsJar
//        }
//    }
//
//    android.libraryVariants.all { variant ->
//        tasks.androidJavadocs.doFirst {
//            classpath += files(variant.javaCompileProvider.get().classpath.files.join(File.pathSeparator))
//        }
//    }
//
//    publishing.publications.all { publication ->
//        publication.groupId = GROUP
//        publication.version = VERSION_NAME
//
//        publication.artifact androidSourcesJar
//        publication.artifact androidJavadocsJar
//
//        configurePom(publication.pom)
//    }
//
//    signing {
//        publishing.publications.all { publication ->
//            sign publication
//        }
//    }
//}
//
//
//
//
