/*
//local.properties 配置示例
release_url = 'https://packages.aliyun.com/maven/repository/2057324-release-jlxpgX/'
snapshot_url = 'https://packages.aliyun.com/maven/repository/2057324-snapshot-VVWHCR/'
username = '123'
password = '123'
//library module下的gradle 配置示例
ext {
    GROUP_ID = "com.zqy.superui-androidx"   // 可以随意取，一般取包名
    ARTIFACT_ID = "msa" // 可以随意取，一般取库的名字
    VERSION = version  // 版本号
}
apply from: '../maven_push.gradle'
* */

apply plugin: 'maven'
apply plugin: 'signing'

ext["release_url"] = ''
ext["snapshot_url"] = ''
ext["username"] = ''
ext["password"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}



configurations {
    deployerJars
}

repositories {
    mavenCentral()
}
// 判断版本是Release or Snapshots
def isReleaseBuild() {
    return !VERSION.contains("SNAPSHOT");
}
// type显示指定任务类型或任务, 这里指定要执行Javadoc这个task,这个task在gradle中已经定义
task androidJavadocs(type: Javadoc) {
    // 设置源码所在的位置
    source = android.sourceSets.main.java.sourceFiles
}

// 生成javadoc.jar
task androidJavadocsJar(type: Jar) {
    // 指定文档名称
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

// 生成sources.jar
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

// 产生相关配置文件的任务
artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: release_url) {
                authentication(
                        userName: username,
                        password: password
                )
            }
            snapshotRepository(url: snapshot_url) {
                authentication(
                        userName: username,
                        password: password
                )
            }

            pom.groupId = GROUP_ID
            pom.artifactId = ARTIFACT_ID
            pom.version = VERSION
        }
    }
}

// 进行数字签名
signing {
    // 当 发布版本 & 存在"uploadArchives"任务时，才执行
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}




